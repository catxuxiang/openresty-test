worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    # 设置默认 lua 搜索路径，添加 lua 路径
    lua_package_path '/home/sky/openresty-test/lua/?.lua;lua/?.lua;/blah/?.lua;;';

    # 对于开发研究，我们可以对代码 cache 进行关闭，这样我们不必每次都重新加载 nginx。
    lua_code_cache off;

    server {
        listen 6699;

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/$1.lua;
        }

	location /test/ {
	    content_by_lua_block {
		ngx.say("113322")
	    }
	}

	location /mysql {
	    content_by_lua_block {
		local mysql = require "resty.mysql"
		local db, err = mysql:new()

		if not db then
			ngx.say("failed to instantiate mysql: ", err)
			return
		end

		db:set_timeout(1000) -- 1 sec

		local ok, err, errno, sqlstate = db:connect{
			host = "127.0.0.1",
			port = 3306,
			database = "openresty_test",
			user = "root",
			password = "790507",
			max_packet_size = 1024 * 1024 }
		if not ok then
			ngx.say("failed to connect: ", err, ": ", errno, " ", sqlstate)
			return
		end

		ngx.say("connected to mysql.")
		-- run a select query, expected about 10 rows in
		-- the result set:
		res, err, errno, sqlstate = db:query("select * from test order by id asc", 10)
		if not res then
			ngx.say("bad result: ", err, ": ", errno, ": ", sqlstate, ".")
			return
		end

		local cjson = require "cjson"
		ngx.say("result: ", cjson.encode(res))

		-- put it into the connection pool of size 100,
		-- with 10 seconds max idle timeout
		local ok, err = db:set_keepalive(10000, 100)
		if not ok then
			ngx.say("failed to set keepalive: ", err)
			return
		end
	    }
	}
    }
}
